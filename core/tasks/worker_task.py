import os
from datetime import datetime
from string import Template

from django.db import transaction
from openai import Client

from core.choices.worker import WorkerProcessStatusChoice
from core.models.snippets import Worker, WorkExperience
from core.models.snippets.base import Grade, Specialization
from core.tasks import AllJobsBaseTask
from libs.file import load_document
from libs.json import json_to_dict


class ProcessWorker(AllJobsBaseTask):
    DEFAULT_ATTEMPT_PERIOD = 1
    name = 'process_worker'
    actions = ['process_worker']

    def get_prompt(self, file_data):
        template = """{
            "name": "–ò–º—è",
            "last_name": "–§–∞–º–∏–ª–∏—è",
            "surname": "–û—Ç—á–µ—Å—Ç–≤–æ",
            "telegram_nickname": "telegram",
            "employer": "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å",
            "grade": ["–ì—Ä–µ–π–¥—ã —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä Junior, Middle"],
            "specialization": ["–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"],
            "stack": ["–°—Ç—ç–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"],
            "skills": ["–ù–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"],
            "programming_languages": ["–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"],
            "technologies": ["–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
            "databases": ["–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"],
            "software_development": ["–°—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û (IDE)"],
            "other_technologies": ["–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ø—Ä–æ—à–ª—ã–º"],
            "about_worker": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –µ–≥–æ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω",
            "experience": –°—Ç–∞–∂ –≤ –≥–æ–¥–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ float, –Ω–∞–ø—Ä–∏–º–µ—Ä 4.5,
            "city": "–ì–æ—Ä–æ–¥",
            "citizenship": "–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤ –≤–∏–¥–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, RU)",
            "english_grade": [{"–ö–æ–¥ —è–∑—ã–∫–∞ (EN, RU –∏ —Ç.–¥.)": "–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, B2, —Ä–æ–¥–Ω–æ–π)"}],
            "education": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            "certificates": ["–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"],
            "employer_contact": "–ö–æ–Ω—Ç–∞–∫—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è",
            "worker_contact": [{"—Ç–∏–ø": "–∫–æ–Ω—Ç–∞–∫—Ç"}], # –ù–∞–ø—Ä–∏–º–µ—Ä [{"email": "example@example.com"}, {"tel": "+7999999999999"}],
            "example_of_work": ["–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç"],
            "work_experience": [{
                "company_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞",
                "start_year": "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã (—Ñ–æ—Ä–º–∞—Ç: MM.YYYY, –µ—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—è—Ü–∞ ‚Äî 01.YYYY)",
                "end_year": "–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã (—Ñ–æ—Ä–º–∞—Ç: MM.YYYY, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è ‚Äî —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞)",
                "position": "–ü–æ–∑–∏—Ü–∏—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏",
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π, –∑–∞–¥–∞—á –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
                "technologies": ["–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
            }],
            "links": [{"—Ç–∏–ø": "—Å—Å—ã–ª–∫–∞"}], # –ù–∞–ø—Ä–∏–º–µ—Ä [{"linkedin": "https://linkedin.com/in/example"}, {"github": "https://github.com/example"}],
        }"""

        prompt = (
            "–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ—Ñ–æ—Ä–º–∏ –µ—ë —Å—Ç—Ä–æ–≥–æ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É. "
            "–ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –ª–∏—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö. "
            "–ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (str = '', —Å–ø–∏—Å–æ–∫ = [], float = 0.0, int = 0). "
            f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {datetime.now().strftime('%m.%Y')}. "
            "–ò–≥–Ω–æ—Ä–∏—Ä—É–π –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞. "
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ, –±–µ–∑ –¥–æ–º—ã—Å–ª–æ–≤ –∏ –¥–æ–≥–∞–¥–æ–∫. "
            "–°–æ–±–ª—é–¥–∞–π —Ç–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON-—à–∞–±–ª–æ–Ω–∞.\n\n"
            f"–®–∞–±–ª–æ–Ω JSON:\n{template}\n\n"
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n{file_data}"
        )
        return prompt

    def get_ai_comment(self, instance, resume_data):
        output_data = """
        {
          "skills": {
            "Python": "Middle",
            "Django": "Senior"
          },
          "observations": [
            "–ö–∞–Ω–¥–∏–¥–∞—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ –≤–ª–∞–¥–µ–µ—Ç Python –∏ Django, –Ω–æ –∏–º–µ–µ—Ç —Å–ª–∞–±—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏.",
            "–•–æ—Ä–æ—à–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω –æ–ø—ã—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
          ],
          "recommendations": [
            "–£–≥–ª—É–±–∏—Ç—å –∑–Ω–∞–Ω–∏—è –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ (FastAPI, Celery).",
            "–ò–∑—É—á–∏—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î (–∏–Ω–¥–µ–∫—Å—ã, –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)."
          ],
          "open_projects_analysis": {
            "repositories": [
              {
                "name": "project_name",
                "url": "https://github.com/username/project_name",
                "analysis": "–ü—Ä–æ–µ–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Django, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤."
              }
            ]
          }
        }
        """
        prompt = f"""
        –ö–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–π–º—É, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏ –æ—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–≤—ã–∫—É.  

        –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ:
        {resume_data}

        –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–∏—á–Ω—ã–π —Å–∞–π—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –µ–≥–æ –ø—É–±–ª–∏—á–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞ GitHub/GitLab –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–≤–µ–¥–µ–Ω–∏–π.  

        –¢—Ä–µ–±—É–µ—Ç—Å—è:  
        1. –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–º –Ω–∞–≤—ã–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, Python ‚Äî Middle, Django ‚Äî Senior).  
        2. –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.  
        3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.  
        4. –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.

        –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:  

        {output_data}

        –ë–µ–∑ –≤–≤–µ–¥–µ–Ω–∏—è, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.  
        """
        try:
            client = Client(api_key=os.getenv("OPENAI_API_KEY"))
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system",
                     "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–π–º—É. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ä–µ–∑—é–º–µ"
                     },
                    {"role": "user",
                     "content": prompt}
                ]
            )
            data = json_to_dict(json_message=response.choices[0].message.content)
            template_text = Template(
"""
üìå **–û—Ü–µ–Ω–∫–∞ –Ω–∞–≤—ã–∫–æ–≤:**
$skills

üîç **–ù–∞–±–ª—é–¥–µ–Ω–∏—è:**
$observations

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
$recommendations

üìÇ **–ê–Ω–∞–ª–∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:**
$projects
"""
            )
            skills_text = "\n".join([f"- {skill}: {level}" for skill, level in data["skills"].items()])
            observations_text = "\n".join([f"- {obs}" for obs in data["observations"]])
            recommendations_text = "\n".join([f"- {rec}" for rec in data["recommendations"]])

            projects_list = data["open_projects_analysis"]["repositories"]
            projects_text = "\n".join(
                [f"- [{repo['name']}]({repo['url']}): {repo['analysis']}" for repo in projects_list])

            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω
            formatted_text = template_text.substitute(
                skills=skills_text,
                observations=observations_text,
                recommendations=recommendations_text,
                projects=projects_text
            )
            instance.ai_comment = formatted_text
            instance.ai_comment_json = data
        except BaseException as err:
            raise Exception(f"Error: {err}")
        instance.save()


    def _get_items(self, data, key, item_type):
        return [{"type": item_type, "value": item} for item in data.get(key, [])]

    def _get_nested_items(self, data, key, item_type):
        return [{"type": item_type, "value": {"value": value, "name": k}} for item in data.get(key, []) for k, value in
                item.items()]

    def _get_language_grade_items(self, data, key):
        return [{"type": "language", "value": {"grade": value, "language": k}} for item in data.get(key, []) for
                k, value in item.items()]

    def _get_filtered_items(self, model, titles, item_type):
        items = model.objects.filter(title__in=titles)
        return [{"type": item_type, "value": item.id} for item in items]

    def _date_to_months(self, date):
        month, year = map(int, date.split('.'))
        return year * 12 + month

    def _update_work_experience(self, work_experience, instance):
        for item in work_experience:
            item.update({"worker": instance})
            if item.get("end_year"):
                item["end_year"] = datetime.strptime(str(item["end_year"]), "%m.%Y")
            if item.get("start_year"):
                item["start_year"] = datetime.strptime(str(item["start_year"]), "%m.%Y")
            total_days = item['end_year'] - item['start_year']
            item['duration'] = round(total_days.days / 365, 2)
            item["technologies"] = self._get_items(item, "technologies", "technology_item")
            WorkExperience(**item).save()

    def process_worker(self):
        worker_id = self.task.input.get("id")
        try:
            instance = Worker.objects.get(id=worker_id)
        except Worker.DoesNotExist:
            self.task.delete()
            return
        try:
            data = load_document(instance.file.file.path)
            client = Client(api_key=os.getenv("OPENAI_API_KEY"))
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system",
                     "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ, —Å–ø–æ—Å–æ–±–Ω—ã–π –≤—ã–¥–µ–ª–∏—Ç—å –∏–∑ –Ω–µ–≥–æ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é "
                                "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ–µ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ. "
                     },
                    {"role": "user",
                     "content": self.get_prompt(data[0].page_content)}
                ]
            )
            result = response.choices[0].message.content
            result_dict = json_to_dict(json_message=result)
            with transaction.atomic():
                instance.name = result_dict.get('name')
                instance.last_name = result_dict.get('last_name')
                instance.surname = result_dict.get('surname')
                instance.telegram_nickname = result_dict.get('telegram_nickname')
                instance.employer = result_dict.get('employer')
                instance.stack = self._get_items(result_dict, "stack", "stack_item")
                instance.skills = self._get_items(result_dict, "skills", "skill_item")
                instance.programming_languages = self._get_items(result_dict, "programming_languages", "language_item")
                instance.technologies = self._get_items(result_dict, "technologies", "technology_item")
                instance.databases = self._get_items(result_dict, "databases", "database_item")
                instance.software_development = self._get_items(result_dict, "software_development",
                                                                "software_development_item")
                instance.other_technologies = self._get_items(result_dict, "other_technologies",
                                                              "other_technology_item")
                instance.about_worker = result_dict.get('about_me')
                instance.experience = result_dict.get('experience')
                instance.city = result_dict.get('city')
                instance.citizenship = result_dict.get("citizenship")
                instance.english_grade = self._get_language_grade_items(result_dict, 'english_grade')
                instance.education = result_dict.get('education')
                instance.certificates = self._get_items(result_dict, "certificates", "certificate_item")
                instance.employer_contact = result_dict.get('employer_contact')
                instance.worker_contact = self._get_nested_items(result_dict, 'worker_contact', 'contact')
                instance.example_of_work = self._get_items(result_dict, "example_of_work", "example_of_work_item")
                self._update_work_experience(result_dict.get("work_experience", []), instance)
                instance.links = self._get_nested_items(result_dict, 'links', 'link')
                instance.grades = self._get_filtered_items(Grade, result_dict.get("grade", []), "grade")
                instance.specialization = self._get_filtered_items(Specialization,
                                                                   result_dict.get("specialization", []),
                                                                   "specialization")
                instance.process_status = WorkerProcessStatusChoice.MODERATION
        except BaseException as err:
            instance.process_status = WorkerProcessStatusChoice.PROCESS_ERROR
            instance.save()
            raise Exception(f"Error: {err}")
        instance.save()
        self.get_ai_comment(instance, result)
