# Generated by Django 5.0.6 on 2024-06-12 10:38

import django.db.models.deletion
import django_countries.fields
import modelcluster.fields
import taggit.managers
import uuid
import wagtail.blocks
import wagtail.fields
import wagtail.snippets.blocks
import wagtailmarkdown.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtaildocs', '0013_delete_uploadeddocument'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
            ],
            options={
                'verbose_name': 'Грейд',
                'verbose_name_plural': 'Грейды',
            },
        ),
        migrations.CreateModel(
            name='MessageSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', wagtailmarkdown.fields.MarkdownField(default='{{ tags }}\n\n**{{ title }}**\n{% for grade in grades %} {{ grade }} {% endfor %}\n\n**Требования к кандидату:**\n{% for item in requirements %}\n{{ item }}\n{% endfor %}\n\n**Обязанности кандидата:**\n{% for item in responsibilities %}\n{{ item }}\n{% endfor %}', help_text='Эта настройка отвечает за то, как будет выглядеть сообщение в канале телеграмма для всех вакансий. Это шаблон!<br/>Здесь работает шаблонизатор jinja2.<br/>Для того, чтобы сделать цикл по элементам:<br/>{% for item in [название переменной] %}<br/>{{ item }}<br/>{% endfor %}<br/>Для того, чтобы сделать условие:<br/>{% if [название переменной] %}<br/>[какие либо действия, будь то вывод переменной или цикл]<br/>{% endif %}<br/>{{ title }} - Заголовок вакансии<br/>{{ specialization }} - Специализация вакансии<br/>{{ stack }} - Стэк вакансии<br/>{{ requirements }} - Требования к кандидату<br/>{{ responsibilities }} - Обязанности кандидата<br/>{{ cost }} - Рейт вакансии<br>{{ location }} - Локация<br>{{ load }} - Загруженность<br>{{ tags }} - Тэги. Будут выводиться в формате тг, то есть с #<br>{{ grades }} - Грейд вакансии')),
            ],
            options={
                'verbose_name': 'Шаблон сообщения',
            },
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=255, verbose_name='Название ранга заявки')),
                ('is_default', models.BooleanField(blank=True, default=False, help_text='Новым заявкам будет проставляться данный ранг (если не указан какой-либо другой)', verbose_name='Является рангом по-умолчанию')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
            ],
            options={
                'verbose_name': 'Специализация',
                'verbose_name_plural': 'Специализации',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
            ],
            options={
                'verbose_name': 'Статус',
                'verbose_name_plural': 'Статусы',
            },
        ),
        migrations.CreateModel(
            name='StepsInBoard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('sort_order', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Сортировка')),
                ('is_default', models.BooleanField(blank=True, default=False, help_text='Новым заявкам будет проставляться данный шаг (если не указан какой-либо другой)', verbose_name='Является шагом по-умолчанию')),
                ('is_hidden', models.BooleanField(blank=True, default=False, help_text='Данный шаг (статус) не будет отображаться на доске. Заявкам можно проставить его чтобы скрыть их с доски', verbose_name='Скрыть шаг (статус) на доске')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
            ],
            options={
                'verbose_name': 'Тип отношений',
                'verbose_name_plural': 'Типы отношений',
            },
        ),
        migrations.CreateModel(
            name='Vacancy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, verbose_name='UUID Вакансии')),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Название вакансии')),
                ('specialization', wagtail.fields.StreamField([('specialization', wagtail.snippets.blocks.SnippetChooserBlock('core.Specialization'))], blank=True, null=True, verbose_name='Специализация')),
                ('stack', wagtail.fields.StreamField([('stack_item', wagtail.blocks.CharBlock(label='Элемент стэка'))], blank=True, null=True, verbose_name='Стэк')),
                ('requirements', wagtail.fields.StreamField([('requirements_item', wagtail.blocks.CharBlock(label='Элемент требования'))], blank=True, null=True, verbose_name='Требования к кандидату')),
                ('responsibilities', wagtail.fields.StreamField([('responsibilities_item', wagtail.blocks.CharBlock(label='Элемент обязанности'))], blank=True, null=True, verbose_name='Обязанности кандидата')),
                ('cost', models.IntegerField(blank=True, null=True, verbose_name='Рейт вакансии')),
                ('location', django_countries.fields.CountryField(blank=True, max_length=2, null=True, verbose_name='Локация вакансии')),
                ('load', models.CharField(blank=True, max_length=255, null=True, verbose_name='Загрузка вакансии')),
                ('grades', wagtail.fields.StreamField([('grade', wagtail.snippets.blocks.SnippetChooserBlock('core.Grade'))], blank=True, null=True, verbose_name='Грейды')),
                ('status', models.IntegerField(choices=[(0, 'Обработка с помощью ИИ'), (1, 'Модерация'), (2, 'Готов к отправке'), (3, 'Отправлен'), (4, 'Найден исполнитель'), (5, 'В исполнении'), (6, 'В архиве')], default=0)),
                ('is_active', models.BooleanField(blank=True, default=True, verbose_name='Активный')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменено')),
                ('is_send', models.BooleanField(default=False)),
                ('channel', models.CharField(blank=True, max_length=255, null=True)),
                ('full_vacancy_text_from_tg_chat', models.TextField(blank=True, verbose_name='Полный текст скопированной из тг вакансии')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Demand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('workers', wagtail.fields.StreamField([('worker', wagtail.snippets.blocks.SnippetChooserBlock('core.Worker'))], blank=True, null=True, verbose_name='Работник')),
                ('duration', models.DateField(blank=True, null=True, verbose_name='Дедлайн проекта')),
                ('company_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Заказчик')),
                ('is_active', models.BooleanField(blank=True, default=True, verbose_name='Активный')),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='demands', to=settings.AUTH_USER_MODEL, verbose_name='Менеджер')),
                ('vacancy', modelcluster.fields.ParentalKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='demands', to='core.vacancy')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VacancyTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='core.vacancy')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='vacancy',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='core.VacancyTags', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.UUIDField(blank=True, default=uuid.uuid4, verbose_name='Код работника')),
                ('name', models.CharField(max_length=255, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=255, null=True, verbose_name='Фамилия')),
                ('surname', models.CharField(blank=True, max_length=255, null=True, verbose_name='Отчество')),
                ('telegram_nickname', models.CharField(blank=True, max_length=255, null=True, verbose_name='Telegram nickname')),
                ('status_date', models.DateField(blank=True, null=True, verbose_name='Дата изменения статуса')),
                ('employer', models.CharField(blank=True, max_length=255, null=True, verbose_name='Работодатель сотрудника')),
                ('sales_rate', models.IntegerField(blank=True, null=True, verbose_name='Рейт продажи')),
                ('purchase_rate', models.IntegerField(blank=True, null=True, verbose_name='Рейт покупки')),
                ('specialization', wagtail.fields.StreamField([('specialization', wagtail.snippets.blocks.SnippetChooserBlock('core.Specialization'))], blank=True, null=True, verbose_name='Специализация')),
                ('grade', wagtail.fields.StreamField([('grade', wagtail.snippets.blocks.SnippetChooserBlock('core.Grade'))], blank=True, null=True, verbose_name='Грейд')),
                ('stack', wagtail.fields.StreamField([('stack_item', wagtail.blocks.CharBlock(label='Элемент стэка'))], blank=True, null=True, verbose_name='Стэк')),
                ('skills', wagtail.fields.StreamField([('skill_item', wagtail.blocks.CharBlock(label='Элемент навыка'))], blank=True, null=True, verbose_name='Навыки')),
                ('programming_languages', wagtail.fields.StreamField([('language_item', wagtail.blocks.CharBlock(label='Язык программирования'))], blank=True, null=True, verbose_name='Опыт работы с языками')),
                ('technologies', wagtail.fields.StreamField([('technology_item', wagtail.blocks.CharBlock(label='Элемент технологии'))], blank=True, null=True, verbose_name='Технологии')),
                ('databases', wagtail.fields.StreamField([('database_item', wagtail.blocks.CharBlock(label='Элемент базы данных'))], blank=True, null=True, verbose_name='Базы данных')),
                ('software_development', wagtail.fields.StreamField([('software_development_item', wagtail.blocks.CharBlock(label='Элемент средства разработки'))], blank=True, null=True, verbose_name='Средства разработки ПО')),
                ('other_technologies', wagtail.fields.StreamField([('other_technology_item', wagtail.blocks.CharBlock(label='Элемент другой технологии'))], blank=True, null=True, verbose_name='Другие технологии')),
                ('about_worker', wagtail.fields.RichTextField(blank=True, null=True, verbose_name='О себе')),
                ('experience', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Стаж')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='Город проживания')),
                ('citizenship', django_countries.fields.CountryField(blank=True, max_length=2, null=True, verbose_name='Гражданство')),
                ('english_grade', wagtail.fields.StreamField([('language', wagtail.blocks.StructBlock([('language', wagtail.blocks.CharBlock(label='Язык')), ('grade', wagtail.blocks.CharBlock(label='Знание языка'))], label='Элемент языка'))], blank=True, null=True, verbose_name='Языки')),
                ('education', wagtail.fields.RichTextField(blank=True, null=True, verbose_name='Образование')),
                ('certificates', wagtail.fields.StreamField([('certificate_item', wagtail.blocks.CharBlock(label='Элемент сертификата'))], blank=True, null=True, verbose_name='Сертификаты')),
                ('employer_contact', models.CharField(blank=True, max_length=255, null=True, verbose_name='Контакт работодателя')),
                ('worker_contact', wagtail.fields.StreamField([('contact', wagtail.blocks.StructBlock([('name', wagtail.blocks.CharBlock(label='Тип контакта')), ('value', wagtail.blocks.URLBlock(label='Значение'))], label='Элемент контакта'))], blank=True, null=True, verbose_name='Контакты сотрудника')),
                ('example_of_work', wagtail.fields.StreamField([('example_of_work_item', wagtail.blocks.URLBlock(label='Элемент примера работы'))], blank=True, null=True, verbose_name='Пример работ')),
                ('links', wagtail.fields.StreamField([('link', wagtail.blocks.StructBlock([('type', wagtail.blocks.CharBlock(label='Тип ссылки')), ('link', wagtail.blocks.URLBlock(label='Ссылка'))], label='Элемент ссылки'))], blank=True, null=True, verbose_name='Ссылки')),
                ('comment', wagtail.fields.RichTextField(blank=True, null=True, verbose_name='Комментарий')),
                ('is_published', models.BooleanField(blank=True, default=True, verbose_name='Публиковать')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.document', verbose_name='Резюме')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.status', verbose_name='Статус')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.type', verbose_name='Тип отношений')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(max_length=255, verbose_name='Наименование проекта')),
                ('date_start', models.DateField(blank=True, null=True, verbose_name='Начало работы')),
                ('date_end', models.DateField(blank=True, null=True, verbose_name='Конец работы')),
                ('role', models.CharField(blank=True, max_length=255, verbose_name='Роль в проекте')),
                ('responsibilities', wagtail.fields.RichTextField(blank=True, verbose_name='Обязанности на проекте')),
                ('description', wagtail.fields.RichTextField(blank=True, verbose_name='Описание проекта')),
                ('technologies', wagtail.fields.RichTextField(blank=True, verbose_name='Технологии проекта')),
                ('team', wagtail.fields.RichTextField(blank=True, verbose_name='Состав команды')),
                ('worker', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='core.worker')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('company_name', models.CharField(max_length=255, verbose_name='Название компании')),
                ('start_year', models.DateField(blank=True, null=True, verbose_name='Начало работы')),
                ('end_year', models.DateField(blank=True, null=True, verbose_name='Конец работы')),
                ('duration', models.FloatField(blank=True, null=True, verbose_name='Срок работы')),
                ('position', models.CharField(blank=True, max_length=255, verbose_name='Позиция')),
                ('description', wagtail.fields.RichTextField(blank=True, verbose_name='Описание проекта')),
                ('worker', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_experiences', to='core.worker')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
